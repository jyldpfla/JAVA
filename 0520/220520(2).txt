●논리값을 뒤집고 싶을 때 -> !변수이름
-boolean t = true;
		
 t = !t;
 System.out.println(t);

●자료형의 확장
보통 자동적으로 이루어짐, 작은 것들을 큰 박스에 담아도 문제가 없기 때문에
(int에 100L 못 넣듯이 큰 걸 작은 박스에 넣는 것은 x)
 -> 바꾸고 싶은 형으로 형을 가로 안에 넣어주면 해결 가능 (ex. int i = (int) 1000L;), 손실에 따른 변화가 있으므로 주의(다른 결과 가져오기)!
-정수형, 실수형은 실수형을 따라 감
- double, int는 boolean값을 형변화해도 숫자가 아니므로 변환되지 않음
- char는 해당하는 숫자를 문자로 나타내므로 문자값을 숫자로 변환 가능

●참조형은 대문자로 시작 -> 클래스를 불러오는 것이기 때문에(기초형은 소문자로 시작)
- 참조형이든 기초형이든 초기화되지 않으면 실행되지 않음

●문자열(String) : 여러 개의 문자로 이루어진 객체 클래스
- 문자 하나하나가 character이고 각각 순서대로 순서를 가짐
- index : character들이 가지는 순서, 숫자로 되어있음, 0부터 시작
- 선언과 초기화 동시에 가능
- 두 개의 문자열을 결합연산자를 통해 결합시켜서 이름을 주면 변수로 불러낼 수 있음
- 문자열이 제일 앞에 있는 상태에서 숫자와 결합하면 문자열로 취급되어 달라붙어서 나옴
- int를 string으로 형변환 불가

●문자열에서 원하는 문자 찾기
-> index를 이용해 가져오고 싶은 순서의 숫자를 넣어서 charAt이라는 메소드를 이용해서 가져옴
(ex. char h = hello.charAt(0);)
- index의 범위 확인 중요,범위값을 벗어나거나 음수값은 없으므로 실행할 때 error나서 거기서 멈추고 뒤 실행x -> 문자열이 몇 글자로 이루어졌는지 확인
- 띄어쓰기, 개행문자도 하나의 문자이므로 index를 가짐
●문자열 문자 개수 확인
: length 메소드를 통해 int형식으로 개수 알려줌

●String.value of
메소드는 객체 안에 있어야 함, 클래스 이름으로 사용하고 있는 메소드
●indexOf / lastIndexOf
찾고자하는 문자나 문자열의 인덱스 번호를 정수형태로 알려주는 메소드 왼쪽부터/오른쪽부터
-없는 문자를 찾으면 -1로 출력
-붙어있는 문자 여러개도 찾을 수 있음(떨어져 있으면 찾을 수 없음)
-시작점을 정해줄 수 있으므로 여러문자에서 하나를 찾고 싶을 때도 찾을 수 있음
● equals 
문자열 값이 같은지 확인할 때 메소드(문자는 참조를 하는데 참조 대상이 같은지를 보는 것이 아님)
(ex. String a = "Hello"; System.out.println(a.equals("He" + llo));)

●메소드()
- ()입력파라미터 : 메소드가 동작할 때 동작할 곳을 알려주는 곳

● 중괄호의 범위
- 중괄호가 계속 생겨있어도 짝만 맞으면 컴파일도 되고, 위에서 아래로 순차적으로 읽어짐
- blockscope : 중괄호 안의 범위
- block : 중괄호 하나의 범위
- 지역 변수 : 중괄호 범위 안에 들어가있는 변수, 자신이 포함된 범위 안에서 만들어진 변수는 범위가 끝나는 순간 사라짐, 한 범위 내에 같은 이름의 변수 가질 수 없음

● if문
- if () {} = if then절 : 맞냐 맞으면 실행해라
- 조건식() : boolean 성질을 가진 논리값 하나, 조건을 제시해서 결과값이 true, false가 나오도록 
- {} : ()안이 참이면 첫 {}의 문장들을 실행하고 아래 순서에 맞춰 그대로 진행, () 거짓이면 if {}의 내용을 건너뛰고 정상적인 흐름으로 흘러감
- if () {} else {} : if가 참이면 바로 뒤 {} 실행, false면 else {} 실행
- if문은 중첩이 가능하므로 여러 개의 조건을 줄 수 있다.
- if () {} else if {} else {} : 3개 이상의 조건, else 필수 x

