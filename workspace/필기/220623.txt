HashSet : hash를 가지고 우선적으로 동일한지 검사
LinkedHashSet : 원소를 추가한 순서정도는 기억
TreeMap : 키의 크기에 따라서 정렬이 될 수 있도록 함 -> key가 comparable해야함(정렬기준이 따로 있으면 compartor를 따로 만들어서 생성자로 던져주면 됨)
● Android
● CLI
● GUI (p.301)
▶ 종류 : AWT(여러 플랫폼에서 쉽게 컴포넌트를 제공), SWING(AWT를 확장시킨 개념), JavaFX(최신)
- SWING 만 순수 java언어로 만들 수 있음

1) SWING
- import javax.swing.JFrame;
▶ 컨테이너(container) : 내부에 다른 컴포넌트를 추가할 수 있는 컴포넌트
▶ 컴포넌트(component) : 레이블, 버튼이나 텍스트 필드와 같은 GUI를 작성하는 기본적인 빌딩 블록
▶ window : 경계선, 타이틀 바, 버튼을 가지고 있는 컨테이너 객체 중 하나인 윈도우를 정의
▶ Frame : 윈도우의 하나, 자바 GUI 어플의 기본
▶ JFrame : Frame을 스윙에 맞춰 변형한 것
▶ Jpanel : 빈 판, 컨테이너를 채울 수 있는 아이, 기본적으로 full로 채움
▶ JTextPane : 텍스트박스
▶ JTextField(column크기) : 사용자의 입력을 받을 수 있는 공간

(1) window 창 만들기
-여러개의 객체를 가짐
-JFrame 선언, 초기화해주고 크기/위치 설정 후 보여주라고 명령해야 보임
▶ 크기 설정 : frame.setSize(가로, 세로);
▶ 화면 출력 : frame.setVisible(boolean값); : true면 나오게, false면 안보이게
▶ 화면 제목 설정
① JFrame frame = new JFrame(제목명);
② frame.setTitle(제목명);
▶ contentPane(내용을 나타냄)이라는 객체를 참조해서 글자를 보이도록 하기
- contentPane은 기본적으로 꽉차게 나타내줌
	-component : 안에 있는 버튼, 메뉴 하나하나를 지칭하는 말
	-ex. frame.getContentPane().add(new JLabel("Hello World"));
▶ 창을 닫아도 프로그램이 계속 돌아가는 게 기본, 닫기 버튼 눌렀을 때 어떻게 할지
: frame.setDefaultCloseOperation(상수) 사용
	-ex. frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		// 닫기 버튼을 눌렀을 때 프로그램을 종료해라
		// EXIT_ON_CLOSE : public, static, final, int 인 것 알 수 있음
▶ 나만의 창, 창의 특징을 그대로 가지고 있는 창을 만들고 싶을 때
: 나만의 창 클래스 만들어서, JFrame 상속 받도록 해줌
▶ 버튼 :
① JButton button = new JButton("버튼이름");
② getContentPane.add(button) // 기본적으로 내용 객체 가득 채우게 설정됨
 -레이아웃 설정 : setLayout() , FlowLayout() : 왼쪽부터 버튼을 중앙정렬해서 일자로 나열
▶ 배경색 설정 : setBackgroud(new Color());
▶ 글자 설정 : setText(문자열); 
	- if int형을 넣고 싶으면 lbl.setText(String.valueOf(number)); 이렇게!
▶ setEnabled() : 활성화 여부, t는 활성화, f는 비활성화(버튼이면 못누르게 설정됨) 
▶ setVisible() : 보이는지 여부, boolean값 받음
▶ getActionCommand() : 가지고 있는 문자값 그대로 출력
▶ setActionCommand() : 커맨드값 설정
▶ setPreferredSize(new Dimension(,)) : 사이즈 제안할 때
▶ setLayout() : 레이아웃을 설정
- 패널에 레이아웃 추가해도 하나도 안보임, 버튼 위치/크기 설정이 안돼있으므로
▶ setLocation(x, y) : 좌상단부터 x축 y축 위치 설정
▶ setSize(x, y) : 가로 세로 길이 설정
▶ pack() : 창을 내부의 컴포넌트 크기에 맞춰서 조절해주는 메소드
▶ getText() : text 받아오기 / setText() : 설정

(2) listener : 이벤트를 가지고 있는 인터페이스
-> 실행할 때 익명메소드로 작성하면 지역변수 사용할 수 있으므로 컨트롤 쉬움
① ActionListener : 클릭했을 때 동작이 구현되도록 하는 인터페이스
- addActionListener() : ActionListner로 가도록 하는 메소드
- ActionEvent 변수 : 각 컴포넌트가 정의하고 있는 액션이 발생했을 때 발생한 이벤트 -> 위의 경우는 클릭했을 때 발생하도록 
▶ getSource() : 이벤트가 발생된 객체의 참조를 알려줌 -> 참조를 알려주고 있으므로 원 object형에서 downcasting 가능

*interface는 head 정의 고칠 수 없음(파라미터 고칠 수 없단 뜻)
* 지역변수 필드화 : 지역변수 커서 올리고 ctrl+1 세번째 클릭

2) 배치 관리자(layout manager)
(1) Flow Layout()
: 기본적으로 중앙에 배치되도록 설정 -> 배치 가꾸기 ex. lowLayout(FlowLayout.RIGHT); // 왼오중앙가능
- 크기를 스스로 정함, 우리가 정해둔 무시 크기 -> 제안 가능 ( new Dimension(가로, 세로) : 2d 크기 지정지정할 때)
(2) BorderLayout()
: 자기 영역에 컴포넌트를 가득 채움 // 동서남북중앙 가능
▶ 사용방법 
① pnl.add(btn1, "North");
② pnl.add(btn2, BorderLayout.CENTER); // 기본값이 center이므로 생략 가능
- 가로로 배치하면 세로는 무조건 가득 채움, 세로로 배치하면 가로로 무조건 가득 채움, 중앙은 가로 세로 무조건 가득 채움
- Dimension(2d 크기 지정지정할 때) 사용하면 가로 기준
- 같은 거 방향 설정하면 덮어씌워짐	
(3) BoxLayout(참조대상, 쌓을 방향)
:  박스쌓듯이 쌓아주기만하는데, 쌓는 방향 결정 가능
(4) GridLayout(줄 , 칸)
: n행 n열로 나뉨(왼쪽 위부터 채워감)
- 크기에 대한 설정은 전부 무시

3) JOptionPane
(1) showMessageDialog(컴포넌트의 위치,띄우고 싶은 메세지);
: 메세지를 담는 dialog를 띄워줌
	- null일 때는 dialog가 중앙에 뜸
	- 해당 컴포넌트 위치를 말해주면, 해당 컴포넌트에 가깝게 띄워줌

* this는 익명클래스에서 사용하면 해당메소드를 가리키므로 this쓸 때 유의
* HELP - Eclipse MarketPlace - Window Builder 제일 위에 설치 - 체크 전부 다 된 상태에서 설치