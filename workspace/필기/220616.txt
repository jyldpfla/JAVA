● comparator
: 추상적인 메소드를 가지는 interface
- compareTo이외 비교할 수 있도록 해주는 interface
▶ 사용 : 
implement Comparator
compare(파라미터 1, 파라미터 2) -> 같은 타입 객체 두 개를 전달 받으면 둘 중 큰 것을 int 타입으로 반환
	왼쪽이 크면 양수, 오른쪽이 크면 음수 

*generic으로 Object형 대신 넣을 수 있지만, downcasting 가능하면 downcasting해도 됨

- comparator는 자기 자신이 아닌 a와 b를 비교(util안이라 import 필요), compareTo는 자기자신과 남을 비교(lang안에 있어서 importx)
- Comparable 인터페이스 -> compareTo 메소드, Comparator 인터페이스 - compare 메소드가 무조건 있음

*https://docs.oracle.com/javase/8/docs/api/ 여기서 각 클래스, 객체별 설명 등 파악 가능

● 지역클래스 local class
: 클래스를 일회용으로 쓸 수 있게끔 메인메소드 안에 만들어서 쓸 수 있음
- 파일을 따로 만드는 등의 노력 필요x, 자바는 클래스 생성(파일 생성)인데 간단하게 관리 위해 간단한 클래스가 필요하면 지역 클래스 사용
- 지역적인 클래스라서 클래스 선언 후에 인터페이스 생성 가능
▶ 익명클래스(anonymous class)
: 이름이 지어지지 않은 클래스
- 이름도 익명으로 사용 가능 -> 생성자는 클래스 이름을 따라가는데, 클래스 이름이 없으므로 생성자 x 
	ex. Comparator<Member> nameCom = new Compartor<Member>() {}; 
	// 메인메소드 안에 있으므로 ; 필요
	// nameCom : 참조형 지역변수
	// 이름이 없고 인터페이스를 구현하고 있는 클래스라서 인스턴스화 가능
- 추상적인 행동이 있는 클래스, 인터페이스를 익명으로 사용

● 인터페이스 interface
: 객체의 추상적인 행동을 나타냄, 추상메소드만을 가짐
but 추가적으로 가질 수 있는 것들 존재
① 상수 : public, static, final한 상수 (public, static, final 생략 가능)
② default 메소드 : 기본값으로 추상 메소드 대신 기본 메소드 형태를 만들어 둠, implements에서 재정의(override)하면 되므로 관계x, 추상메소드 아니므로 implements해도 꼭 override할 필요 x
③ static 메소드 : 정적인 메소드 존재, 다만 접근 지정자 private은 java 9버전부터 사용 가능
- 객체의 동작(x), 프로그램이 로드될 때 자동으로 생성되는 기능을 인터페이스에 써둔 것
- a 객체안의 메소드는 인스턴스화를 시켜야 메소드를 사용 가능, a 객체 안에 static 메소드는 객체가 처음 로드될 때(사용될 때) 자동으로 로드가 되므로 객체 생성 없이 바로 기능만 꺼내서 사용 가능
- 인터페이스 안에 있는 static 메소드는 위치만 인터페이스 안에 있는 기능일 뿐이므로, implements로 구현하는게 아니라 (추상메소드, default 메소드는 인터페이스 안에 있는 동작이므로 implements 해야함) 위치한인터페이스명.메소드명으로 위치를 잡아서 호출해줘야함

* static 메소드는 객체가 생성되지 않아도, 객체 필요없이 사용할 수 있으므로 그냥 기능을 옮겨둔 것

● static 정적 메소드
- java는 객체를 따라서 흐름대로 프로그램이 실행됨 but static은 흐름과 관계없이 프로그램이 로드될 때 객체와 관계없는 정적인 상수, 메소드등이 만들어짐
객체는 new로 인스턴스화를 시켜서 공간이 있어야 하는데, static은 객체가 아니므로 그냥 메소드 그 자체임.

* \\GREEN-424\Java\_Doc - Java SE 8 용어 총정리 보기

Math.random -> static 메소드 Math 클래스(o) , 객체 (x) -> 객체는 코드로 작성해서 만들어서 인스턴스화를 시킬 수 있는 것,
Math 클래스는 컴퓨터 세상안에 존재하는 클래스, 인스턴스화 시킬 필요도 없음