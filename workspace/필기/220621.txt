● LinkedList
: 각 원소를 링크로 연결, 삽입/삭제가 쉬움
- 원소의 추가/삭제가 자주 일어나는 상황에서 리스트의 구현 클래스를 하나 더 둠
- 사용법 ex) List<String> list = new LinkedList<String>();
- List라는 인터페이스로 미리 정의해뒀으므로 사용법 동일 -> 저번 수업 때 배웠던 것들 다 그대로 사용
▷ 모든 원소에 빨리 접근할 때는 ArrayList가 좋음, LinkedList는 추가/삭제가 자주 일어날 때 사용(ArrayList는 중간에 삽입, 삭제 시 원소들을 이동시켜야 하므로)
- 위치(인덱스)를 가지고 원소를 접근하는 위치적인 접근이 많으면 ArrayList가 나음
LinkedList와 달리 ArrayList는 capacity존재 (내부적으로 가지는 초기 배열의 크기)
▶ LinkedList에 있는 추가적인 메소드 : addFirst(), getFirst(), removeFirst(), addLast(), getLast(), removeLast()
▶ LinkedList는 List, Queue를 implements하고 있음
- 객체 넣을 수 있음(List는 전부 기본형x)

● Queue
: 제일 앞에 것을 빼주고, 제일 뒤에 추가해주는 인터페이스
▶ offer : 제일 마지막에 추가하는 것, Queue의 추상 메소드
	- add도 사용 가능
▶ poll() : 제일 앞에 있는 원소의 참조 반환, 원소가 없으면 null 반환
▶ remove() : 제일 앞에 있는 원소 참조 반환, 원소가 없으면 예외 반환
▶ element(), peek() : 원소를 지우지 않고 제일 앞에 가져와줌 (위 3개가 더 중요)

● Stack
: 밑에서부터 차곡차곡 쌓이지만, 꺼낼 땐 제일 마지막(위에 꺼)
▶ 사용법 : Deque<String> stack = new LinkedList<>(); // Deque -> stack 사용할 때
-LinkedList로 구현
▶ push() : 값 넣기
▶ pop() : 제일 마지막 값 하나 튀어나오게 하기

● interface 하나로 여러 개의 클래스 만들기