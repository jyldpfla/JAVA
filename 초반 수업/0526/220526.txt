<오늘 배운 거>
1. 메소드
2. 메소드 헤드: 반환형 이름 (파라미터 목록)
- 메소드 이름 -> 영소문자
3. 메소드 바디: {~~문장~~}
- 메소드에서 값 반환하기
4. 메소드 호출
- 호출 시의 값 전달
switch (정수형 값 or 문자형 값) {()값과 같은 곳으로 이동}
- ()에 맞는 case가 없으면 default값으로 , default값도 없으면 중괄호 바깥으로 정상 진행
- switch case 흐름을 끊을 때는 break 사용
- if문의 or 처럼 case 1: case 2: 로 배치해두면 하나의 명령으로 사용 가능

● 메인메소드
: 반복, 조건등을 이용해 필요한 흐름을 만들어낼 수 있음
-ex. public static void main(String[] args) {
		
	}
- 프로그램 시작은 언제나 메인메소드부터, 메인메소드 시작지점부터 순서대로 흘러감
- 메인메소드 앞에 메소드 있어도 읽지 않음
- 메소드는 클래스 안에 존재, 한 클래스에 여러 메소드 존재 가능
- 메소드 호출을 메인메소드에서 해주면 위로 다시 올라가서 실행하고 순차적 진행
	but 메소드에서 만든 변수는 지역변수이므로 메인메소드에서 호출x
- 컴파일에러 안나려면 메소드 머리, 몸통 다 존재해야함
▶ 메소드 머리(head): 이름, (), void -> 메소드 이름
▶ 메소드 몸통(body): 메소드의 범위를 나타내는 {}안 문장들 -> 메소드 기능
▷ 메소드의 이름. 영소문자. 여러 단어가 있으면 다음 단어의 첫 번째 글자를 대문자로.
▶ return type : void (메소드의 리턴타입이 없음이므로 반환값이 없다, 대입연산등도 불가)
 -> 내가 불러내고 싶은 타입에 맞춰서 return type 지정해야함 + return하고 싶은 변수도 불러줘야함
-메소드 작성시 header와 return 값 타입이 다르면 error
- return을 만나면 다시 위로 돌아가는데, 가져오려는 값을 옆에 두면 그 값을 찾아서 가지고 돌아옴
- 바깥의 메소드를 메인메소드에 적용할 때 메소드이름(값); 값 꼭넣어줘야함
● parameter
: 메소드의 입력을 위해 존재, 메소드이름옆의 ()부분, 입력값을 받는 입구
- 메소드이름 옆 타입은 출구라고 보면 됨
- 메인메소드에서 실행할 때 파라미터 개수에 맞는 값을 주면 호출된 메소드에서 각 위치에 맞게 들어가서 결과값 도출
- 파라미터에서 만든 변수는 그 범위 안에서만 사용가능한 지역변수
▷ 메소드에서 만든 파라미터 개수 = 메인메소드에서 실행할 때 주는 값 개수 여야함
▷ 변수 타입에 맞게 값을 주지 않으면 error
▷ 값은 변수에 맞는 각 위치에 들어가므로 순서대로 들어감

● call by value : 메소드를 호출할 때는 변수를 불러도 결국엔 변수 값이 복사되어서 호출 됨
● 메소드는 return 값을 하나만 가질 수 있음

● public : 아무나 다같이 사용할 수 있도록 하는 접근제한자중 하나

● 참조형을 주고 받는 메소드
string 변수는 실제 값을 가지고 있는게 아니므로, 경로가 복사되어 가는 것임

*double의 형식 지정자 : %f