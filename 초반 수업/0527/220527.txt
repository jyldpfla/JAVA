● 메소드 return
: return값을 메인 메소드로 가져갈 때 값의 타입을 메소드에 엄격하게 지정해야 메인메소드에서 활용 가능
(static 옆 값타입 입력 중요)
*public이 붙어있는 메소드를 기준으로 제목을 잡음
▶ 매개변수(parameter): 메소드에서 값을 받을 때 사용하는 변수
▶ 인수(argument): 메소드 호출 시 전달하는 값

● 상수
: 변해서는 안 되는 수를 선언할 때, 변하지 않으므로 약속처럼 사용 가능 -> 변하는 것을 방지할 수 있는 수
▶ final int 상수이름 = 상수; -> 상수를 만들고 초기화 + 선언
- 앞에 final을 붙이는 것이 변수와의 차이
- 값을 변화시키려고 하면 compile error를 냄
- 대문자로 이름 작성(변수(주로 소문자)와의 구분을 위해서),단어간_로 띄어쓰기 대체
- 상수도 첫 초기화는 가능, 두 번째부터는 불가(변해서는 안되므로)
- 같은 이름의 여러 상수 지정 x, 지역변수이므로 영역 밖에서 사용 x
▷ 메소드로 상수값 전달 가능, 메인메소드에서 지정된 상수를 int 형식으로 받으면 ++등의 연산 가능
	final 붙여서 상수로 받아올 수도 있음

● 전역 변수
: 모든 곳에서 사용 가능한 변수, 다른 메소드들에서도 접근이 가능함
▶ static이 붙음 (ex. static int number = 100;)
▶ public이 붙으면 클래스 이름으로 전역 변수 호출 가능, 아무데서나 불러서 사용 가능 (ex. public static int number = 100;) (ex. Math 클래스에 있는 PI 변수를 부를 때 Math.PI 이렇게 부를 수 있음)
- 전역 변수가 많아질수록 넓은 범위에서 변할 수 있는 관리해야하는 것들이 많아지므로 코딩하기 어려워짐
- 전역 변수를 너무 많이 사용하는 것보다, 가능하면 관리 쉽도록 상수로 지정해주거나 하는 식으로 관리하기 쉽도록 해주는 것이 좋음

*static 전역 범위, 정적 
-class의 객체 표현과는 다르게 존재 (알아만두기)
*Math : 수학적 계산을 위한 상수들을 모아둔 클래스
-abs : 절대값
-random: 랜덤으로 숫자
*메인메소드 : 실행하는 파트를 주로 담당

● 객체지향 프로그래밍(OOP,Object-Oriented Programming) <-> 절차 지향 프로그래밍
: 현재 가장 널리 쓰이고 있는 프로그래밍, 세상에 있는 모든 것을 객체로 보고 그 객체를 코드로 적어서(표현해서) 코드로 만들어진 객체(가상의 객체)를 넣어서 객체들간에 메세지를 주고 받으며 프로그램의 흐름을 만들어 내는 것 -> 객체들 간에 상호작용을 함
-연관관계가 있는 함수, 데이터끼리 묶어있음
-java는 현재 객체 지향을 따르는 언어 체계를 가짐
-메시지(메소드)를 통해 다른 객체와 통신하고 상호 작용, 메시지는 매개변수(parameter)의 형태로 전달됨

● 객체 (class)
: 상태와 동작을 가짐
▶ 상태 : 변수의 형태로 표현됨, 값으로 나타낼 수 있는 것, 데이터 타입과 이름으로 표현
▶ 멤버변수, 필드 : 객체의 구성요소, 상태를 부를 때 사용
-> 객체 안의 변수가 필드 ,함수가 메소드
▶ 메소드/기능 or 동작
-동작에 이름을 붙일 수 있음
▶ 객체의 소멸 CarTest.java주석 참조



● 인스턴스
: 값을 가질 수 있는 공간, 기억 공간 할당되어 있음
▷ new 클래스이름(): 인스턴스화를 할때 꼭 필요
- 참조형 변수(박스)가 만들어지고 경로가 지정되고 참조를 하는데 별도의 인스턴스를 만들어서 값을 가져올 때 인스턴스에서 가져옴 
- 참조형 변수들은 인스턴스를 가리킴
- 참조형 변수는 null을 참조할 수 있음
▶ null 참조: null 지금 참조할 수 있는 것이 없다, null(없음)을 참조
*참조형 변수 사용 시 참조가 제대로 이루어지고 있는지 확인이 필요
- 참조형 변수에서 상태 값은 instance에서 각각 고유하게 가지고 있음
▶ 인스턴스화: 참조할 수 있는 변수의 참조값을 저장할 공간 생성 후 저장 (ex. Car myCar = new Car())
