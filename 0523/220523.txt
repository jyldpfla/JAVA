복습

● 자료형의 형변환
연산은 왼쪽부터 되고 오른쪽 값이 왼쪽으로 대입연산 됨(순서 중요)

● 자료형의 확장
작은 것에서 큰 것으로의 변화는 명시적인 표시(ex. int num = (int) a;)를 해줄 필요는 없지만 → 손실이 없으므로 가능
큰 것에서 작은 것으로의 변화는 명시적인 표시가 필요에서 컴파일러가 수행 가능(손실이 있는 걸 감수)
-> 손실로 인해 엉뚱한 값이 도출될 수 있음(기계어가 이진수므로 잘려서 나오는 과정에서)

● 참조형 중 문자형
String : class이므로 대문자로 시작
-박스가 생기는 것은 똑같지만 박스에 실제로 담기는 것이 아닌 다른 어딘가의 값을 참조하는데, 그 위치를 표시해둔 것
-기본형과 같이 선언과 초기화를 한 번에 할 수 있음
-문자형이 앞에 있으면 뒤에 숫자나 boolean값이 문자형으로 달라붙음
-변수 뒤 .이라는 연산자를 이용해 안에 명령을 이용 가능 (ex. char h = hello.charAt(0);)
-index에 음수 없으므로 음수를 사용하면 compile에선 괜찮지만, 실행 중 error 발생
-indexOf로 정수형태로 위치를 알 수 있는데, 없는 경우 -1을 도출, 오른쪽 index부터 찾을 수도 있음
- == 비교연산자(같은 값은 하나의 참조로 만들어두므로 달라도 같다고 나오는 경우 o)
(compile은 실행 전 번역을 하므로 실행 중에 값을 같게 한 것은 같은 참조를 만들 수 없으므로 다르게 나옴)
대신 .equals로 값이 같은지 확인 가능
-nextLine : 사용자의 든 한 줄의 입력을 문자열로 받아서 받음
-next : 사용자가 구분자로 사용하는 파트 전까지 문자열로 입력받아서 받음(스페이스바, 엔터)

●제어문
1) 조건문 : if (조건식) {then절} else {}
: 특정한 조건을 충족하는 명령, 조건식이 true면 then절을 실행해라
-else 절을 통해서 if의 첫 조건이 false일 때 실행되는 명령을 만들 수 있음(필수 x)
-중첩 가능
-elseif : if 조건이 거짓일 때만 다른 else if의 조건을 물어보고 true면 중괄호 안 false면 넘어감

▶중괄호로 구역을 많이 만들게 됨
-block : 중괄호를 여닫는 짝으로 만드는 범위
-block 범위 내에서 만든 변수는 그 범위 내에서만 사용 가능(바깥에서 사용하려면, compile error)

