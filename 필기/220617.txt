* HashMap<>

● 예외처리 (p.504)
: 예외가 생겼을 때, 프로그램을 우아하게 종료하거나 오류 처리 후 계속 실행될 수 있게 하는 것
▶ exception (p. 505)
: 컴퓨터가 처리할 수 없는 예외적인 상황이 발생해서 예외에 대한 메세지를 콘솔창에 보이는 것
- if문을 통해 exception 제어 가능
- 배열 길이의 문제면 index 길이 체크
▶ 예외처리 try-catch구문
try{예외의 가능성을 지닐 문장(프로그램 흐름 문장)} catch(예외의 타입) {예외 처리 문장}
예외 발생 x -> catch문 넘어가서 정상흐름으로 지나감
예외 발생 -> catch문 안으로 들어가서 예외 처리 후 정상흐름으로 
▶ 타입 (Exception을 상속받는 상속구조를 가짐)
- Exception : 모든 예외 타입의 부모
	- 상위클래스가 위에 적혀있으면, 순서대로 읽어 내려가므로 catch문 아래것들 사용 불가 -> 부모를 밑에 해야 compile errorx
- InputMismatchException 타입 : 지정한 변수 타입과 다른 타입을 입력받았을 때 발생하는 예외 
- NullPointerException : 널 포인트 익셉션 처리
- ArirhmeticException : 수 익셉션 처리
- ArrayIndexOutOfBoundsException : 배열 인덱스 예외 처리
▶ e.printStackTrace : 예외가 발생됐던 경로를 console 창에 출력
	-> 아래가 가장 오래된 과거
- 예외 객체 생성(=예외를 던진다), 예외 객체 처리(=예외를 잡는다)
- 버그:논리적 오류 != 예외:실행 흐름에서 예외적인 경우
- 변수에서 오류나면 그 타입에 맞는 예외타입을 가진 catch문에서 실행, 예외타입 설정 안된 오류는 error 그대로 남
- 지역변수로 선언됐으면 다른 곳에서 사용x, catch문에서도 사용x 
▶ finally {} 
: 예외가 생기든 아니든, 무조건 실행(꼭 실행되어야 하면 {}에 넣어야 함)
- 외부의 네트워크나 파일을 사용해야할 때는 사용을 끝냈다고 알려주어야 하는데, 이 때 사용
▶ throw new 객체 : 객체만들고 인스턴스화; (예외 객체를 만든 것(예외를 던진다))

=> 예외가 생겼을 때, 예외를 처리하고 원래 흐름대로 돌아가도록 할 수 있음

▶ 메소드에서의 예외 처리 : 예외 처리를 호출한 쪽으로 넘기기 (,로 여러 개 넘길 수 있음)
- ex. public static int divide(int left, int right) throws MyZeroDivideException {
		if (right == 0) {
			throw new MyZeroDivideException("나눌 수 없음");
			// return 값 int x
			// 메소드에서는 예외처리
		} else {
			return left / right;
		}
	}
- 메소드 예외처리 미완성시
	ex. public static int myFunction() {
		// 미완성 -> compile error
		throw new UnsupportedOperationException("내일 만들게. 아직 덜 만듦");
	     }
▶ Exception을 상속하는 RunTimeException을 상속받으면 실행중에 발생할 수 있는 예외들을 try-catch하도록 강요하지 않음(unchecked)
	Exception은 checked -> 무조건 try-catch 작성

● String Builder : 문자를 합칠 때 사용, 문자열 객체를 만듦, 이름처럼 세세하게 하나씩 옵션 등을 사용 가능
- 기본 문자열 + 문자열 하면 새로운 인스턴스를 만들어냈는데, 원래 값에 append로 더하는 것이기 때문에 새 인스턴스가 만들어지지 않음
- StringBuffer도 있음
▶ append : 숫자 연산에서 더하기와 같음
- 값에 대한 변경 가능(지우기, 잘라내기, 사이에 추가
	append 이후에 자기자신의 참조를 return

● java는 multithread 지원 -> 여러개의 흐름을 지원
여러 개의 흐름에서 안전함

● StringJoiner : 문자 합칠 때 사용, 모양낼 때 사용
- 사용:  StringJoiner sj = new StringJoiner("구분자", "시작문자", "끝문자" ); 

● StringTokenizer : 문자열 자르기
- 사용 StringTokenizer st = new StringTokenizer(잘라내고자 하는 문자열, 기준문자열);
	while (st.hasMoreTokens()) { // 더 자르고 싶은게 있냐 - true, false로 출력
			System.out.println(st.nextToken()); // 있으면 출력
		}
