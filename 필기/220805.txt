● thread가 여러 개가 있으면 동시에 여러 작업을 할 수 있지만, gui는 1개이므로 동시 작업 x 
-> '작업'이라는 동작을 계속 살펴보는 동작을 계속 하고 있음
-> 작업 공간에 해야할 일을 하나씩 나열해두고 하나씩 하나씩 동작함 

● Java로 Web Programming -> Appache 이용
Eclipse 4.16-2020.06-Eclipse IDE for Enterprise Java Developers 설치 (including tools for Web Services 있으므로 web과 연동 사용 가능) 
-> 원래 있던거랑 안 겹치는 경로에 설치!
-> tomcat start.bat 실행중이면 shut down! 꺼주기

▶ 이용 위해 tomcat과의 경로 설정
window - show view - servers or 아래 console 뜨는 쪽 servers 클릭 - create new server - appache - tomcat9 누르고 next - browse 누르고 tomcat깔린 폴더 선택 next - finish
=>  카탈리나 베이스 : 같은 환경이지만 다른 위치에서 tomcat을 구동할 수 있게끔 하나의 instance가 생성이 됨 (복제본 느낌이라고 생각하면 됨)
=> server에서 run누르면 tomcat 실행됨 (tomcat start.bat 켜두면 포트번호 겹쳐서 error 나므로 꺼주고 실행

▶ Project 생성 : new project - dynamic web project 선택 후 프로젝트 이름 적고 next - next - generate 체크해주고 finish
	- target runtime이 제대로 설정되어있는지 확인
	- context root : 프로젝트명 , 웹에서 파일 켤 때 필요하므로 프로젝트명과 다르게 설정했으면 기억하기 
	- web content : 적힌 이름 그대로 폴더 생성됨, 안 폴더들 웹 연결과 필요한 것들이 들어간 폴더
		-web-INF 안에 web.xml이 생성되어있을 것(generate 체크했으면), 안했으면 우클릭 Java EE Tools - Generate D~~ 클릭하면 생성됨

▶ 파일 생성 : WebContent 우클릭 - html파일 - fine name 지정 - 기본 템플릿 지정칸에서 html5 누르고 finish - ok
	- jsp파일 생성시 <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%> 이 부분   
		=> page directive : jsp에서 필요한 설정들을 미리 해두는 공간
	- jsp파일은 궁극적으로 html 문서
▶ 파일 구동 : 프로젝트 우클릭 - run as - run on server 클릭 - tomcat 목록(등록한 서버 목록)에서 클릭 next - 실행 파일 우측에 있는지 확인
▶ 웹에서 파일 켜기 : localhost:8080/context root 경로(프로젝트명과 다를 수 있음)/파일명.확장자명
	-> tomcat webapps폴더에 복사를 해주고 그 tomcat을 통해서 주소에 접속할 수 있도록 만들어주는 것(실제 tomcat에는 올라가있지 x)
	-> 파일명.확장자명 안 쓰고 enter하면 web.xml에서 설정한 기본값(파일 열고 source에서 확인 가능)대로 index.html 파일이 뜸(webserver는 기본적으로 index.html파일을 찾도록 함)

=> 카탈리나 베이스에서 만들고 완성하고 실제 tomcat에 넣어주면 프로그램 만들어서 배포 가능

▶ 파일 배포 : 프로젝트 우클릭 - export : war - destination : 톰캣 webapps에 저장되도록 - tomcat start.bat실행하면 webcontent에 있던 내용이 프로젝트명을 따와서 폴더화됨(배포) -> 웹에서 켜보면 실행됨

▶ jsp 파일 :  궁극적으로 html 문서
- <%@ %> page directive : jsp에서 필요한 설정들을 미리 해두는 공간 (<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%> 부분)
- <% %> scriptlet : 안에 java 언어 작성 가능
	- <%= %>표현식 : 메소드를 읽어서 toString으로 출력해줌 (<%= java.time.LocalTime.now() %> 이 부분) 
	- <%-- --%> : 주석처리
	- java언어라 compile error나면 error 뜸
- 사용자 1명의 연결에 대해서 1:1로 1개의 실행 흐름(thread)를 만듦 -> 사용자 요청대로 thread가 실행흐름에서 jsp파일을 찾아내서 위에서부터 읽어내려옴 
- <%! %> 선언부 : 메소드만 입력가능 page directive 아래 작성
▷ request 객체 : client가 요청을 http프로토콜에 따라 header 정보와 body 정보를 담아 보냄 -> 이 요청 객체를 tomcat이 만들어줌(요청에 맞춰 동적인 행동을 하기 위함) -> 이 객체는 request객체로 불러와서 이용 가능
- 요청정보 전송방식 = <%= request.getMethod() %> -> return이 get이면 body가 비어있고, 주소에 내용을 담아둠 

▶ form
- action : 입력양식에 들어간 정보를 보여줄 수 있는 곳으로 옮기라고 명령
- method : 사용자가 submit을 눌렀을 때 어떠한 방식으로 요청을 만들지 명시
① get : body가 없고 parmeter가 사용자가 요청한 주소에 붙어서 표현이 됨 -> 사용자에게 드러남
② post : body에 사용자의 요청 정보가 담김(요청 정보 길이 = body의 길이값)
* URL은 한글을 표현할 수 없어서 URL은 한글을 보면 encoding을 함(문자 변환하는 작업을 함) -> decoding필요, encoding/decoding은 같은 방법으로 실행해야 원래의 값을 가질 수 있음 (charset의 형식에 맞춰서 decoding을 하면 됨)

