● context root
- context root 경로는 변경이 가능 -> 변경되면 주소이름 그대로 쓴 부분 전부 변경해야하므로 표현식 사용
	- ex. <form action="<%= request.getContentLength() %>/testRequest.jsp">
- context root를 /로 설정하면 tomcat 카탈리나 베이스에 이미 설정이 다 된 뒤로 배포돼서 먹히지 않으므로 어플리케이션 지웠다가 다시 올리면 됨 -> server에  >누르면 파일들 있는데 삭제하고 , 마우스 우클릭 clean tomcat하고 다시 올리기
- 많이 사용하는 경로는 /로 설정, context root를 책과 관련된 프로젝트면 /book등으로 명시

● context
: 개발자들이 사용할 수 있는 정보들을 모아두는 공간, 객체, 어플리케이션 하나
- pageContext객체를 통해 getRequest 메소드로 페이지에서 사용하는 요청 가져올 수 있음 -> getter들로 필요한 정보 가져올 수 있음

● appication
: 자바 웹 어플리케이션의 설정 등을 설정하거나 접근할 수 있는 객체
- web.xml에 기본적인 설정이 xml로 작성되어 있음
▶ 속성 설정 방법
① context param?
② setAttribute(이름, 객체) : 속성 지정 가능, 논리적인 흐름으로 설정해주는 방법, 설정해두고 구동한 뒤엔 어플리케이션이 동작하는 동안 계속 존재
	- request 객체의 setAttribute는 사용자의 한 번의 요청에 대해서만 유지되므로 이 요청이 처리될 때만 값이 생성되어 들어감, 끝나면 사라짐
		
▶ WEB-INF 폴더 안의 내용은 일반 사용자가 접근할 수 없음(보이지 않도록 설정) -> webpage에 민감한 정보들이 모두 들어가 있음

●XML : 개발자들을 위한 정보로 사용됨, API등을 통해 개발자에게 정보를 제공하고자 할 때 주로 사용되는 하나의 포맷
- 각각의 고유한 태그를 가질 수 있는데 이 약속에 대한 파일이 따로 있음

- 스킴을 가지고 있는 파일, 내용을 가지고 있는 파일로 구분됨
- 여는 태그, 닫는 태그로 구성, html처럼 태그로 표현, html보다 규칙이 까다로움
- context param : 웹 어플리케이션을 구동할 때 tomcat이 읽어서 특정 객체에 이름, 값을 넣어줌 -> 이름을 통해 값을 얻을 수 있음(getInitParameter)
	- 이름, 값 지정 가능(무조건 두 개 다 써줘야 함), 여러 개 있을 수 o
	- 계속 값이 존재해있으므로, 어플리케이션 전반에 사용되는 고유한 값이 있을 때 설정해두면 됨(ex.jdbc driver 이름)

● forward : 하나의 흐름으로 합치는 것, forward()안의 객체를 그대로 가지고 가게 됨
- forward(request, response) : 요청과 응답 객체를 그대로 가지고 이동
- redirect는 새로운 요청 객체가 만들어지므로, request 객체에 담아뒀던 값들을 페이지가 받아오기 어려움
	->페이지가 값을 공유할 수 있게끔 하나의 request 객체를 유지 + 페이지 흐름 이동하기 위해 forward 사용
▶ getRequestDispatcher : forward할 수 있는 객체, 페이지 흐름을 이동시킬 수 있음
	- redirect는 페이지명이 변경되지만, getRequestDispatcher는 변경되지 않음

● web application은 라이브러리 위치가 지정되어있음 -> WEB-INF폴더 안 lib(라이브러리 관리 위한 라이브러리 폴더)

● db와 웹 연동
① WEB-INF - lib에 mysql connector jar 넣기 
②  db와 연결하는 코드 작성 +  db 연동 페이지 만들기, setter로 값 설정
* 동적인 파라미터 값이 있을 때, 그 값을 미리 지정해주는 것이 PrepareStatement -> ?로 지정, Statement는 파라미터 값 아예 써줘야함
③ web페이지에 표현하는 jsp파일 만들어서 getter로 db페이지에서 값 받아오기
- 페이지 분리 이유 : 많은 데이터를 다루고, 데이터를 다루는 동작이 복잡해졌을 때 단순하게 보기 위해
