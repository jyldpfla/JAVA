● log : 기록 -> server가 함(사용자 요청에 문제, 흐름등을 어딘가에 남겨야함)
	지금까지는 console에 sysout으로 확인 -> 개발자가 동작을 할때 바로 확인 가능 but 어플리케이션을 끄면 console창에서 기록 찾아볼 수 없음
	같은 기록이라도 파일로 남기면 -> 파일 찾아서 언제 어디서 남긴 기록인지 확인 가능
==> logger를 통해서 console, file에도 남겨보기!
- 파일, 메일 등에도 기록이 남게 할 수 있음 -> 우리가 저장하고 싶은 곳을 설정하면 다양한 위치에 저장 가능
▶ logback 검색 - logback home 클릭 - documentation에서 8버전 logback 몇버전이랑 지원되는지 확인
▶ apache common dbcp2 검색 - org.apache.commons » commons-dbcp2 - popular categories - logging frameworks - Logback Classic Module » 1.2.11 jar 다운  + Logback Classic Module » 1.2.11 Compile Dependencies (5)에서 logback-core 다운 + SLF4J API Module » 1.7.36 다운(* ver 빨간색은 개발중인 것)
- 유명한 라이브러리를 사용해서 해볼 것 : apache log4j, apache commons logging, slf4j등
▶ private final static Logger logger = LoggerFactory.getLogger(BoardServlet.class); : 로거 객체 생성
▶ 사용하는 메소드를 통해 정보의 중요도 표시 -> logger는 정보를 남길 때 중요도에 따라 다르게 메소드를 통해 정보를 남김
	- slf4j에서 중요도 : FATAL(치명적인 정보) / ERROR(에러메세지) / WARN(경고메세지) / INFO(일반적인 정보) / DEBUG(세세하고 자세한 흐름 설명, 	로깅에서 많이 사용하는데, 볼지 안 볼지 선택 가능)
	① logger.info(문자열) : 간단한 프로그램 흐름, 일반적인 정보 알려줄 때 사용
- 필요한 양식 설정 가능 : 시간, 발생 패키지/클래스 확인 가능, 중요도 확인 가능(ex. INFO)
▶ logger가 어디 남아있는지 확인 -> 설정 파일 생성해주면 됨
	- 검색창에 logback.xml 검색 - Chapter 3: Logback configuration(공식홈페이지임!) - Automatic configuration with logback-test.xml or logback.xml에서 아래 양식 복사 - src에 others - logback.xml 파일 생성해서 써져있는 거 아래에 붙여넣기
	* logback home chapter6 보면 기록 서식 지정하는 방법 나와있음!

▶ 설정 파일에서 파일 생성하기 : logback home chapter 4 appender에서 file appender에서 <appender>태그 사이 전부 복사 붙여넣기(root위)

===> sysout 대신 logger 사용해서 기록 남기는 것이 여러 방면으로 기록을 남길 수 있으므로 좋음 <===
	


● 외부 도구를 활용한 프로젝트 관리 -> maven
그동안 eclipse를 통해 관리 -> gradle, ant, maven등도 관리
▶ 프로젝트 생성 : new - other - maven - maven project + next - create 체크 + next - groubid(패키지명), artifact id(jar, war파일명), name(프로젝트명), packaging(배포할때의 형식), version(패키징할때 버전명 써줄 수 있음, 새 파일 만들고 싶으면 버전 변경하면 됨!) - finish
- pom.xml : maven project의 설정이 들어가있는 파일
- 프로젝트 우클릭 - Maven - update~ - 체크하고 ok하면 설정 변경됨
▶ 버전 변경 : <properties>에 <maven.compiler.source>,<maven.compiler.target>에 버전 써주고 설정 변경하면 됨(update)
▶ 라이브러리 의존성 생기면 : <dependencies> -> Maven Dependencies에서 다운된 라이브러리 확인 가능
	- ex. logger 사용하고 싶으면 logger 다운받은 곳 들어가서 maven에 있는 코드 복사해서 dependencies 안에 붙여넣기 (myapp/pom.xml 참고)
		(logback scope는 지워야함 -> 안지우면 동작x)
	-> 라이브러리가 많이 필요해도 간단하게 추가 가능
▶ archetype : 프로젝트 만들 때의 기본형 설정 가능
	-> 프로젝트 생성할 때 create 체크 없이 next하면 다양한 archetype중에서 고를 수 있음
	- catalog : internal 에서 quickstart: 일반 java, webapp : servlet application 만들 때 사용 가능
	-> 일반 java project 만들고, maven 프로젝트로 변경 가능 : 프로젝트 우클릭 - configure - convert to maven project - 생성하듯이 해주고 finish해주면 끝! 	+	lib대신 pom.xml에서 라이브러리 관리하므로, pom에서 설정(lib jar 지워도 됨) (라이브러리 검색한 같은데서 검색해서 복붙하면 됨)
▶ MVC 패턴 - Model : 서비스를 통해 제공하고자하는 주제, 정보나 메소드를 담고있는 객체 클래스(ex. 유저의 정보를 담고 있는 User.java), View : 보여주는 화면(jsp), Controller : 제어(handler, service)
▶ API, Application Programming Interface
▶ 레이어 : 여러 클래스를 만들어서 연결지어 이용하는 패턴 -> 객체의존성이 생김(연결을 위해 필드로 객체 선언해야함
