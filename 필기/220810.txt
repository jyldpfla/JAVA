● Dynamic Web Project - Java Resources - src에서 당연히 java file 생성 가능

● ${} el : jsp 페이지에서 출력을 도와줌
- el에서 getter가 있는 속성이면 get을 쓰지 않고 이름만 쓰면 됨 (모든 객체들 대상)
▶ param.파라미터이름 : 파라미터의 값 가져올 수 있음 (<%= request.getParameter() %>와 같음)
▶ requestScope.어트리뷰트이름 : request객체의 어트리뷰트값을 가져옴
   applicationScope.어트리뷰트이름 : application객체의 어트리뷰트값을 가져옴
	- page, request, session을 다루는 scope가 존재 -> 영역 크기 : (큼) app > session > Req > page (작음)
		-> 좁은 범위부터 찾아서 좁은 범위의 값을 가져옴
		- 페이지 스코프는 제일 작은 스코프로, 페이지 안에서만 사용됨

● jstl jar 검색 - jstl » 1.2 - javax.servlet - Maven Repository 사이트 클릭 jar 누르면 다운 - lib에 넣기
▶ 사용방법
① jsp파일에 아래 넣기
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!-- 위 주소 <ctrl><space>하면 3번재꺼!, prefix : 사용할 라이브러리를 어떤 이름으로 사용할지 명명 -->

▶ 흐름 제어 => 태그를 통해 흐름 제어 가능 (명명한 이름 c라고 가정)
① <c:forEach></c:forEach>
② <c:if></c:if> 
	- else가 없음
③ <c:when></c:when> <c:otherwise></c:otherwise> : if else를 대신할 태그, switch case와 비슷, 첫 조건이 맞으면 break걸려서 다른게 맞아도 실행x
	- otherwise : else, default와 비슷, 없어도 됨
- 태그의 형태를 한 jsp에서만 쓸 수 있는 custom tag라서 java코드로 번역

● servlet 클래스 : 사용자 요청을 받아서 처리해주는 클래스, 웹 요청과 응답의 흐름을 간단한 메서드 호출만으로 체계적으로 다룰 수 있게 해준다.
=> 즉 jsp는 servlet이고 servlet은 클래스를 만들어서 html파일로 보여줌
▶ httpServlet은 Servlet의 자식
▶ web.xml에서 
	<servlet> : name태그엔 아무거나, class 태그에는 servlet파일 만들어둔 패키지명.파일명
	<servlet-mapping> : name태그에는 위 이름 그대로, url-pattern에는 /문자열 
	-> web.xml있는 프로젝트 다시 서버 구동하고 주소 뒤에 url-pattern에 써준 거 그대로 쓰면 servlet파일 내용 출력
- servlet파일은 위치가 따로 없으므로 web.xml에서 위처럼 주소를 설정해주어야함
▶ servlet container : servlet을 적재하고 있는 공간, tomcat을 이름
- 사용자가 요청을 하면 jsp파일이 있는지 주소에 맵핑된 servlet이 있는지 확인 + servlet은 빌드될 때 미리 컴파일, 컴파일 되어있는 클래스 파일을 가지고 객체를 만들고 메소드를 호출한다 + 흐름따라 응답이 완성됨 => html 문서 완성
- 첫 요청에 servlet 객체 만들고 계속 그 객체 사용
- if servlet에 필드로 상태값을 가진다면 여러 사용자가 servlet에 동시접속했을 때, 상태값이 서로 다르므로 같은 데이터를 보기 힘들 수 있음 -> 그래서 servlet은 상태값을 가지면 다루기 어려움