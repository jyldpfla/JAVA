● Listener
▶ focusListener : 포커스를 줬을 때 이벤트가 일어날 수 있도록 하는 인터페이스
	- focusGained : 포커스를 얻었을 때
	- focusLost : 포커스를 잃었을 때

● 마우스가 컴포넌트 위에서 클릭, 움직이는 행동을 하면 event는 일어나고 있음 -> mouse event가 일어날 때의 Listener
1) MouseListener
: mouse event가 일어날 때의 Listener
- 추상 메소드를 5개 가짐
	① mouseReleased : 마우스 버튼을 뗌
	② mousePressed : 마우스 버튼을 누름
	③ mouseClicked : 마우스 클릭했을 때
		- click event는 사용자 pc 마다 클릭 이벤트의 감도가 다르기 때문에 적용 정도에 차이 있을 수 있음
			-> ①, ② 많이 사용
		- double click할 때 event 발생하도록 설정 -> getClickCounnt()로 카운트 횟수 확인 후 동작 부여 가능
		- 사용자가 마우스의 어느 버튼을 클릭하든 event 발생x, 사용자가 누른 버튼 확인 -> e.getButton() // 어떤 버튼 눌렀는지 상수로 알려주는데, os 설정마다 위치상수 다름
		- SwingUtilities.isLeftMouseButton(e) : 왼쪽 버튼인지 아닌지 boolean값으로 나타내줌
	④ mouseEntered : 마우스를 올려둘 때(hover)
	⑤ mouseExcited : 마우스를 올려두지 않았을 때

- 추상메소드가 공간을 차지 많이 하므로 하나만 메소드를 재정의 하고 싶을 때 -> MouseAdaptor라는 추상클래스(MouseListener 구현, method들의 body를 다 비워둔 상태로 재정의 -> 필요한 것만 골라서 재정의 가능)

2) MouseMotionListener
: 마우스의 움직임 event가 일어날 때 
① mouseMoved() : mouse의 움직임
	- getX(), getY() : 사용자의 커서 위치  x, y 좌표, 좌상단이 0

3) KeyListener
: key를 입력하는 event가 일어날 때
① keyTyped : 하나의 키가 온전하게 입력됐을 때
② keyReleased : 키보드 버튼을 뗐을 때
③ keyPressed : 키보드 버튼을 눌렀을 때
??????????????-> 단축키 설정할 수 있게땨!!

- getKeyCode() : 키보드 값을 숫자형태로 얻을 수 있음
- getKeyChar() : 키보드 값을 char형태로 얻을 수 있음
- KeyEvent : .찍고 보면 virtual 키패드로 정리한 것들 뜸
● JFrame
▶ JPanel pnl = new JPanel(null);
		// JPanel은 기본적으로 컴포넌트를 full layout으로 가져오는데 값을 주지 않음 -> 직접 정해줄 수 있음
1) 이미지 넣기
-> JLabel은 텍스트뿐만 아니라 이미지도 표현 가능, 아이콘으로 받기 때문에 icon 인터페이스로 넣어줘야함(new ImageIcon(image))
- ex.
Toolkit kit = Toolkit.getDefaultToolkit();
// 이미지를 받기 위해 Toolkit을 이용하기
Image image = kit.getImage("춘식8.png");
// 이미지 받아오기 -> 폴더안에 이미지파일 있어야함, gif도 가능
		
JLabel lbl = new JLabel(new ImageIcon(image));
// 텍스트뿐만 아니라 이미지도 표현 가능
// 아이콘으로 받기 때문에 icon 인터페이스로 넣어줌
pnl.add(lbl); 
▷ 자원(이미지 등)을 사용하기 위해선 자원의 위치가 가장 중요 -> 위치를 알아야 사용 가능(같은 폴더(경로)에 있는 파일을 찾음, 다른 경로면 찾을 수 없음) 
① class파일의 폴더와 같은 폴더에 있을 때 경로 설정
- ex
		URL url = Main4.class.getClassLoader().getResource("춘식9.png");
		// URL - java.net 안에 존재하는 클래스
		// getClassLoader() : reflection을 통해 class path 안에 있는 자원을 참조할 수 있도록 찾음
		// getResource("찾고자하는 자원명") : 자원이 있는 위치를 나타내는 url 명시
		// this.getClass() = Main4.class 
		ImageIcon image = new ImageIcon(kit.getImage(url));
		URL url2 = Main4.class.getClassLoader().getResource("춘식8.png");
		ImageIcon image2 = new ImageIcon(kit.getImage(url2));

② class파일의 폴더 안 다른 패키지에 있을 때 경로 설정
- ex.
URL url = Main4.class.getClassLoader().getResource("images/춘식9.png");
// 폴더 안 경로 /로 폴더 안을 의미해줌(내부 경로 표시)
// URL - java.net 안에 존재하는 클래스
// getClassLoader() : reflection을 통해 class path 안에 있는 자원을 참조할 수 있도록 찾음
// getResource("찾고자하는 자원명") : 자원이 있는 위치를 나타내는 url 명시
// this.getClass() = Main4.class 
ImageIcon image = new ImageIcon(kit.getImage(url));
URL url2 = Main4.class.getClassLoader().getResource("images/춘식8.png");
ImageIcon image2 = new ImageIcon(kit.getImage(url2));

③ resources만 담을 source 폴더를 새로 만들어서 담은 후 경로 설정 -> 나눠서 관리 가능
- root 경로가 다른 폴더가 따로 있지만, 같은 경로로 설정됨 -> output은 bin폴더에 다 들어가므로 되므로 같은 폴더에 들어가게 됨

▶ JPasswordField : 비밀번호를 입력할 수 있도록 하는 필드
▶ JTextArea : 글쓸 수 있는 공간(사용자가 여러줄의 텍스트를 입력할 수 있게함 ), 크기를 정수형태로 전달 받음
▷ append : 기존 입력에 덧붙일 때 사용하는 메소드
▶ JSplitPane(가로/세로 쪼개는 방향, 1, 2) : 화면 분할
- setDividerLocation(정수) : 초기 분할 설정
▶ JTabbed : 탭화면, 사용자가 변화할 수 있도록
▶ CardLayout : 화면의도에 따라 화면 전환
- layout.show(관리하고 있는 패널 참조, 보여주고 싶은 패널의 문자열) -> 해당하는 컴포넌트만 보여줌
- layout.next(패널) : 넣은 순서대로 다음 것 보여줌, 순환
- layout.previous(패널) : 넣은 순서대로 이전 것 보여줌, 순환
